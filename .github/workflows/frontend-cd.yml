# week08/.github/workflows/frontend-cd.yml

name: CD - Deploy Frontend to AKS

# This workflow can be called by other workflows and takes inputs.
# Or it can be run manually if you provide the IPs.
on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: false
        default: ''
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: false
        default: ''

  # Still keep the callable interface so other workflows can pass values in
  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string

# Provide sensible defaults from repo secrets if inputs are blank
env:
  # Fallback to secrets if the inputs are not supplied
  AKS_CLUSTER_NAME:   ${{ inputs.aks_cluster_name != '' && inputs.aks_cluster_name || secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ inputs.aks_resource_group != '' && inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}
  # ACR details for image pulls inside manifests (if referenced)
  ACR_NAME:           ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER:   ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        # IMPORTANT: az acr login expects the *ACR NAME*
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting IPs into frontend/main.js"
          # Ensure we replace placeholders with the two input values
          # Inputs expected format: http://X.X.X.X:PORT
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js

          # Display the modified file content for debugging
          echo "--- Modified main.js content ---"
          cat frontend/main.js
          echo "---------------------------------"

      # Build and Push Docker image for Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      # Set Kubernetes context (get AKS credentials)
      # You can keep the action or use az aks get-credentials; both are fine.
      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name:   ${{ env.AKS_CLUSTER_NAME }}

      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend with latest tag to AKS cluster: ${{ env.AKS_CLUSTER_NAME }}"
          cd k8s/
          # Ensure frontend.yaml image reference uses your ACR login server + image name
          # Example in YAML:
          #   image: ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          kubectl apply -f frontend.yaml

      - name: Logout from Azure (AKS deployment)
        run: az logout
