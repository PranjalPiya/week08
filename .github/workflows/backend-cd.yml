# week08/.github/workflows/backend_cd.yml

name: CD - Deploy Backend Services to AKS

# Trigger workflow manually
on:
  workflow_dispatch: {}

# Global environment variables (set from GitHub secrets)
env:
  AKS_CLUSTER_NAME:   ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  ACR_NAME:           ${{ secrets.ACR_NAME }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    # Expose IP addresses of deployed services as workflow outputs
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login to Azure using Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # 3. Set Kubernetes context (get AKS credentials)
      - name: Set Kubernetes context (get AKS credentials)
        run: az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing

      # 4. Attach ACR to AKS (idempotent - safe if already attached)
      - name: Attach ACR
        run: az aks update --name $AKS_CLUSTER_NAME --resource-group $AKS_RESOURCE_GROUP --attach-acr $ACR_NAME

      # 5. Deploy Backend Infrastructure (ConfigMaps, Secrets, DBs)
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      # 6. Deploy Backend Microservices (Product + Order)
      - name: Deploy Backend Microservices (Product, Order)
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      # 7. Wait for LoadBalancer IPs
      - name: Wait for Backend LoadBalancer IPs
        shell: bash
        run: |
          # Change service names here if different in your YAML files!
          SVC_PRODUCT="product-service"
          SVC_ORDER="order-service"

          echo "Waiting for Product and Order LoadBalancer IPs..."
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc $SVC_PRODUCT -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc $SVC_ORDER -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1
          fi
          # Export IPs for later steps
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      # 8. Capture Product Service IP
      - id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      # 9. Capture Order Service IP
      - id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      # 10. Logout from Azure
      - name: Logout from Azure
        run: az logout
