name: CI - Test, Build & Push (Monorepo)

on:
  push:
    branches: [ develop, main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ develop ]
    paths:
      - "backend/**"
      - "frontend/**"

env:
  SIMULATE: ${{ vars.SIMULATE }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test_and_build:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (backend)
        run: |
          pip install --upgrade pip
          pip install -r backend/product_service/requirements.txt
          pip install -r backend/order_service/requirements.txt
          pip install pytest httpx

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Azure Login
        if: ${{ env.SIMULATE != 'true' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        if: ${{ env.SIMULATE != 'true' }}
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push backend images
        if: ${{ env.SIMULATE != 'true' }}
        run: |
          REG="${{ env.ACR_LOGIN_SERVER }}"
          docker build -t "$REG/product_service:latest" backend/product_service
          docker push "$REG/product_service:latest"
          docker build -t "$REG/order_service:latest" backend/order_service
          docker push "$REG/order_service:latest"

      - name: Build & Push frontend image
        if: ${{ env.SIMULATE != 'true' }}
        run: |
          REG="${{ env.ACR_LOGIN_SERVER }}"
          docker build -t "$REG/frontend:latest" frontend
          docker push "$REG/frontend:latest"

      - name: Simulated CI summary
        if: ${{ env.SIMULATE == 'true' }}
        run: echo "SIMULATION MODE: Tests ran. Would build & push images to ACR."

  trigger_release_on_main:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ test_and_build ]
    runs-on: ubuntu-latest
    steps:
      - name: Call release orchestrator
        uses: ./.github/workflows/release.yml
        with:
          environment: prod
        secrets: inherit
